// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of all users. Only admins can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "List all users (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "id",
                        "description": "Field to sort by (e.g., email, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "asc",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term for email or name",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users\" // Use UserListResponse",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new user with specified details. Only admins can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new user (Admin)",
                "parameters": [
                    {
                        "description": "New user details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.AdminCreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details for a specific user by their ID. Only admins can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user by ID (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user's details by ID. Only admins can perform this action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update a user (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update details (fields are optional)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.AdminUpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input or user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user by ID. Only admins can perform this action.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a user (Admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted user"
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required or cannot delete self",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/containers/{id}/exec": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates and starts an exec instance in a running container.\nSupports both non-interactive execution (HTTP POST) and interactive sessions (WebSocket upgrade).\nFor interactive sessions, upgrade the connection to WebSocket.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Execute Command in Container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-running-container",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Exec configuration",
                        "name": "exec",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerExecCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols (interactive WebSocket)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "200": {
                        "description": "Success (non-interactive)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerExecResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., missing command, invalid ID)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (user lacks permission)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Checks the health status of the API server, providing basic information like version and environment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Server status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "head": {
                "description": "Checks the health status of the API server, providing basic information like version and environment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Server status information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Logs in a user with email and password, returning JWT tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidates the current access token.",
                "tags": [
                    "Auth"
                ],
                "summary": "Log out a user",
                "responses": {
                    "204": {
                        "description": "Successfully logged out"
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refreshes the access and refresh tokens using a valid refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh JWT tokens",
                "parameters": [
                    {
                        "description": "Refresh token details",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed tokens",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user. The first user registered automatically gets the admin role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered and logged in",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of tracked Docker Compose deployments and their status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "List Compose Deployments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved deployments",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.DeploymentInfo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/up": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Parses, validates, and deploys a Docker Compose project.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Deploy Compose Project (Up)",
                "parameters": [
                    {
                        "description": "Compose file content and deployment options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ComposeUpRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Deployment process started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Failed to parse or validate compose file",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during deployment",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Parses and validates the structure of a provided Docker Compose file content.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Validate Compose File",
                "parameters": [
                    {
                        "description": "Compose file content",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ComposeValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Compose file is valid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "status": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation failed (invalid YAML or structure)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed status information for a specific Docker Compose deployment by project name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Get Compose Deployment Details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-web-app",
                        "description": "Project Name (ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved deployment details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.DeploymentInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Deployment not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/{id}/down": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stops and removes containers, networks, and optionally volumes for a deployment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Remove Compose Project (Down)",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-web-app",
                        "description": "Project Name (ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Remove named volumes declared in the 'volumes' section",
                        "name": "remove_volumes",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Remove containers for services not defined in the Compose file",
                        "name": "remove_orphans",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": false,
                        "description": "Force removal",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Removal process started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Deployment not found (required for ComposeFile)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/{id}/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restarts containers for services in a deployment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Restart Compose Project Services",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-web-app",
                        "description": "Project Name (ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 5,
                        "description": "Timeout in seconds for stopping containers before restarting",
                        "name": "timeout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Restart process started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Deployment not found (required for ComposeFile)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/{id}/scale": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Scales a specific service within a deployment to the desired number of replicas.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Scale Compose Service",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-web-app",
                        "description": "Project Name (ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Service name and replica count",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ComposeScaleRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Scaling process started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Deployment or service not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/{id}/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts existing containers for services in a deployment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Start Compose Project Services",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-web-app",
                        "description": "Project Name (ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Start process started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Deployment not found (required for ComposeFile)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/compose/{id}/stop": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stops running containers for services in a deployment without removing them.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compose"
                ],
                "summary": "Stop Compose Project Services",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-web-app",
                        "description": "Project Name (ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 5,
                        "description": "Timeout in seconds for stopping containers",
                        "name": "timeout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Stop process started",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Deployment not found (required for ComposeFile)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of containers based on optional filters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "List containers",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Show all containers (default shows just running)",
                        "name": "all",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum number of containers to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Return container sizes",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters to apply (JSON map format, e.g., {\\",
                        "name": "filters",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved container list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid filter format",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new Docker container based on the provided configuration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Create a new container",
                "parameters": [
                    {
                        "description": "Container Configuration",
                        "name": "container",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created container",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.Container"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input or configuration",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied (e.g., creating privileged container as non-admin)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Image not found (if pull fails)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Container name already in use",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., Docker daemon error)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved container details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Remove a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Force removal of a running container",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Remove anonymous volumes associated with the container",
                        "name": "volumes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Container removed successfully"
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., container is running and force=false)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/changes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Shows changes to files or directories on a container's filesystem since it was created.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Inspect changes on a container's filesystem",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved filesystem changes",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ChangeItemResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/files": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a file or directory from a container as a TAR archive.",
                "produces": [
                    "application/x-tar"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Download file or directory from container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "/etc/nginx/nginx.conf",
                        "description": "Absolute path to the file or directory inside the container",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TAR archive of the requested path",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid container ID or missing path parameter",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container or path not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads a TAR archive to a specified path within a container. The request body must be the TAR archive.",
                "consumes": [
                    "application/x-tar"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Upload file or directory to container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "/usr/share/nginx/html",
                        "description": "Absolute destination path inside the container",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "TAR archive content",
                        "name": "archive",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Archive successfully uploaded",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid container ID, missing path parameter, or empty/invalid request body (e.g., malformed tar)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., failed to write archive)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves logs from a container. Can optionally stream logs.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container logs",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Stream logs",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "example": true,
                        "description": "Include stdout",
                        "name": "stdout",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "example": true,
                        "description": "Include stderr",
                        "name": "stderr",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "1h",
                        "description": "Show logs since timestamp (e.g., 2013-01-02T13:23:37Z) or relative (e.g., 42m for 42 minutes)",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2023-10-27T11:00:00Z",
                        "description": "Show logs before timestamp (e.g., 2013-01-02T13:23:37Z) or relative (e.g., 42m for 42 minutes)",
                        "name": "until",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Show timestamps",
                        "name": "timestamps",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "\"all\"",
                        "example": "50",
                        "description": "Number of lines to show from the end of the logs (e.g., 100 or all)",
                        "name": "tail",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container logs stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid container ID or query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/pause": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pauses a running container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Pause a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Container paused successfully"
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found or not running",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/rename": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Renames an existing container.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Rename a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Container Name",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerRenameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully renamed container",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid container ID or new name",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "New name already in use",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restarts a container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Restart a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 5,
                        "description": "Timeout in seconds to wait for container to stop before starting it",
                        "name": "timeout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Container restarted successfully"
                    },
                    "400": {
                        "description": "Invalid container ID or timeout",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts a stopped or created container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Start a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Container started successfully"
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a live stream or a single snapshot of resource usage statistics for a container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container resource usage statistics",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Stream stats (true) or get a single snapshot (false)",
                        "name": "stream",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container statistics stream (if stream=true, Content-Type: text/event-stream)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/stop": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stops a running container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Stop a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "example": 5,
                        "description": "Timeout in seconds to wait for container to stop before killing it",
                        "name": "timeout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Container stopped successfully"
                    },
                    "400": {
                        "description": "Invalid container ID or timeout",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/top": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Shows the processes running inside a container, similar to the 'top' command.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "List processes running inside a container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "\"\"",
                        "description": "Arguments to pass to 'ps' command (e.g., -ef)",
                        "name": "ps_args",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved process list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.TopResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found or not running",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/containers/{id}/unpause": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unpauses a paused container.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Unpause a container",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-nginx-container",
                        "description": "Container ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Container unpaused successfully"
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found or not paused",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/image-history/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the history (layers) of an image. Handles names with slashes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID or Name:Tag (URL encoded if contains slashes)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved image history",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageHistoryItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid image ID/name format",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/images": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of Docker images.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "List images",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created",
                        "example": "size",
                        "description": "Field to sort by (e.g., repository, tag, size, created)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Show all images (including intermediate layers)",
                        "name": "all",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by dangling images",
                        "name": "dangling",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "maintainer=me",
                        "description": "Filter by label (e.g., key=value)",
                        "name": "label",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "nginx",
                        "description": "Search term for repository, tag, or image ID",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved images",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/images/build": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Builds a Docker image from a Dockerfile and context. Context can be uploaded as a TAR archive.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Build an image",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-custom-app:v1.1",
                        "description": "Image tag (e.g., myapp:latest)",
                        "name": "tag",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Dockerfile content (alternative to context archive)",
                        "name": "dockerfile",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Build context as TAR archive (can contain Dockerfile)",
                        "name": "context",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "\"Dockerfile\"",
                        "example": "build/Dockerfile.prod",
                        "description": "Path to Dockerfile within the context archive",
                        "name": "dockerfile_path",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Do not use cache when building the image",
                        "name": "nocache",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Always attempt to pull a newer version of the image",
                        "name": "pull",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "buildarg.APP_VERSION=1.1",
                        "description": "Build-time variables (e.g., buildarg.VERSION=1.0)",
                        "name": "buildarg.*",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "label.project=webapp",
                        "description": "Set metadata for an image (e.g., label.maintainer=me)",
                        "name": "label.*",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image built successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageBuildResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing tag, invalid tag format, missing Dockerfile/context)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., Docker daemon error, failed to process context)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/images/pull": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pulls an image from a Docker registry. Authentication can be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Pull an image",
                "parameters": [
                    {
                        "description": "Image Pull Request",
                        "name": "image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImagePullRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image pulled successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImagePullResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing image name)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required or invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied for registry",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Image not found in registry",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., Docker daemon error)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/images/tag": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new tag for an existing image. Handles names with slashes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Tag an image",
                "parameters": [
                    {
                        "description": "New Tag Info",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageTagRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Image tagged successfully"
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing repo/tag, invalid format)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Source image not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Tag already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/images/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific image by its ID or name/tag. Handles names with slashes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get image details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "nginx:latest",
                        "description": "Image ID, Name, or Name:Tag (URL encoded if contains slashes)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved image details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid image ID/name format",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes an image by its ID or name/tag. Handles names with slashes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Remove an image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID, Name, or Name:Tag (URL encoded if contains slashes)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Force removal of the image",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Do not delete untagged parents",
                        "name": "noprune",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image removal report",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageRemoveResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid image ID/name format",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Image not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., image is in use by a container)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of Docker networks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "List networks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "example": "name",
                        "description": "Field to sort by (e.g., name, created_at, driver)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "bridge",
                        "description": "Filter by driver name",
                        "name": "driver",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "app-net",
                        "description": "Filter by network name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved networks",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new Docker network.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Create a new network",
                "parameters": [
                    {
                        "description": "Network Configuration",
                        "name": "network",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created network",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Network name already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific network by its ID or name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Get network details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-app-network",
                        "description": "Network ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved network details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid network ID/name",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Network not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a Docker network by its ID or name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Remove a network",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-app-network",
                        "description": "Network ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Network removed successfully"
                    },
                    "400": {
                        "description": "Invalid network ID/name",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Network not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., network is in use)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/{id}/connect": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Connects a container to a specified network.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Connect a container to a network",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-app-network",
                        "description": "Network ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Container Connect Info",
                        "name": "connect_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkConnectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container connected successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Network or container not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Container already connected",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/{id}/disconnect": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disconnects a container from a specified network.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Networks"
                ],
                "summary": "Disconnect a container from a network",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-app-network",
                        "description": "Network ID or Name",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Container Disconnect Info",
                        "name": "disconnect_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkDisconnectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container disconnected successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Network or container not found, or container not connected",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Streams real-time events from the Docker daemon using Server-Sent Events (SSE).",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Stream Docker system events",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1h",
                        "description": "Show events since timestamp (e.g., 2013-01-02T13:23:37Z) or relative (e.g., 42m)",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2023-10-27T12:00:00Z",
                        "description": "Show events until timestamp (e.g., 2013-01-02T13:23:37Z) or relative (e.g., 42m)",
                        "name": "until",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "{\\\"type\\\":[\\\"container\\\"],\\\"event\\\":[\\\"start\\\",\\\"stop\\\"]}",
                        "description": "JSON encoded map[string][]string for filtering (e.g. {\\",
                        "name": "filters",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of Docker events",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid filter format",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about the Docker host system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get Docker system information",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved system info\" // Use local model",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SystemInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., Docker daemon error)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/ping": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pings the Docker daemon to check connectivity and API version compatibility.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Ping Docker daemon",
                "responses": {
                    "200": {
                        "description": "Successfully pinged Docker daemon\" // Use local model",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PingResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., Docker daemon error)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/prune": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes unused containers, networks, images, and build cache.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Prune unused Docker resources",
                "parameters": [
                    {
                        "description": "Prune options",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SystemPruneRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully pruned resources",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SystemPruneResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get current user details",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the name and/or email of the currently authenticated user. Changing email requires re-verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update current user details",
                "parameters": [
                    {
                        "description": "User update details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the authenticated user to change their own password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change current user password",
                "parameters": [
                    {
                        "description": "Password change details",
                        "name": "passwords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Password successfully changed"
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required or incorrect current password",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/volumes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of Docker volumes, optionally filtered.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "List volumes",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 20,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "example": "name",
                        "description": "Field to sort by (e.g., name, created_at, driver)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "local",
                        "description": "Filter by driver name",
                        "name": "driver",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "my-app-data",
                        "description": "Filter by volume name (exact match)",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved volumes",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PaginatedResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new Docker volume.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Create a new volume",
                "parameters": [
                    {
                        "description": "Volume Configuration",
                        "name": "volume",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created volume\" // Changed to 200 OK as we return the created object",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Volume name already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/volumes/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific volume by its name or database ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Get volume details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-app-data",
                        "description": "Volume Name or Database ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved volume details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid volume ID/name",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Volume not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a Docker volume by its name or database ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Volumes"
                ],
                "summary": "Remove a volume",
                "parameters": [
                    {
                        "type": "string",
                        "example": "my-app-data",
                        "description": "Volume Name or Database ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "example": true,
                        "description": "Force removal of the volume",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Volume removed successfully"
                    },
                    "400": {
                        "description": "Invalid volume ID/name",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Volume not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., volume is in use)",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.AdminCreateUserRequest": {
            "description": "Data required for an administrator to create a new user account.",
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "active": {
                    "description": "Active specifies if the new user account should be active immediately. Defaults to true if omitted.\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "email": {
                    "description": "Email is the new user's email address.\nrequired: true\nexample: newuser@example.com",
                    "type": "string",
                    "example": "newuser@example.com"
                },
                "email_verified": {
                    "description": "EmailVerified specifies if the new user's email should be marked as verified. Defaults to false.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Name is the new user's display name.\nrequired: true\nexample: Jane Smith",
                    "type": "string",
                    "example": "Jane Smith"
                },
                "password": {
                    "description": "Password is the initial password for the new user (min 8 characters).\nrequired: true\nexample: InitialP@ssw0rd!",
                    "type": "string",
                    "minLength": 8,
                    "example": "InitialP@ssw0rd!"
                },
                "roles": {
                    "description": "Roles is an optional list of roles to assign to the new user.\nexample: [\"user\", \"editor\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "editor"
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.AdminUpdateUserRequest": {
            "description": "Data for an administrator to update an existing user's details. All fields are optional.",
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active specifies whether the user account should be active.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "email": {
                    "description": "Email is the user's updated email address. If changed, email verification status might be reset.\nexample: \"john.doe.updated@example.com\"",
                    "type": "string",
                    "example": "john.doe.updated@example.com"
                },
                "email_verified": {
                    "description": "EmailVerified specifies whether the user's email address is verified.\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "description": "Name is the user's updated display name.\nexample: \"Johnathan Doe\"",
                    "type": "string",
                    "example": "Johnathan Doe"
                },
                "roles": {
                    "description": "Roles is the updated list of roles for the user. An empty slice clears existing roles.\nexample: [\"user\", \"admin\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "admin"
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ChangeItemResponse": {
            "description": "Details about a file or directory that has been modified, added, or deleted compared to the container's image.",
            "type": "object",
            "properties": {
                "kind": {
                    "description": "Kind indicates the type of change: 0 for Modified, 1 for Added, 2 for Deleted.\nrequired: true\nexample: 1",
                    "type": "integer"
                },
                "path": {
                    "description": "Path is the path to the file or directory that has changed.\nrequired: true\nexample: \"/app/config.json\"",
                    "type": "string",
                    "example": "/etc/nginx/nginx.conf"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ChangePasswordRequest": {
            "description": "Data required for a user to change their own password.",
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "description": "CurrentPassword is the user's existing password.\nrequired: true\nexample: OldP@ssw0rd!",
                    "type": "string",
                    "example": "OldP@ssw0rd!"
                },
                "new_password": {
                    "description": "NewPassword is the desired new password (min 8 characters).\nrequired: true\nexample: NewStrongP@ssw0rd!",
                    "type": "string",
                    "minLength": 8,
                    "example": "NewStrongP@ssw0rd!"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ComposeScaleRequest": {
            "description": "Specifies the service and the desired number of replicas.",
            "type": "object",
            "required": [
                "replicas",
                "service"
            ],
            "properties": {
                "replicas": {
                    "description": "Replicas is the desired number of containers for the service.\nrequired: true\nexample: 3",
                    "type": "integer",
                    "minimum": 0,
                    "example": 3
                },
                "service": {
                    "description": "Service is the name of the service to scale.\nrequired: true\nexample: \"worker\"",
                    "type": "string",
                    "example": "worker"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ComposeUpRequest": {
            "description": "Contains the Docker Compose file content and options for deploying a project.",
            "type": "object",
            "required": [
                "compose_file_content",
                "project_name"
            ],
            "properties": {
                "compose_file_content": {
                    "description": "ComposeFileContent is the raw YAML content of the Docker Compose file.\nrequired: true\nexample: \"version: '3.8'\\nservices:\\n  web:\\n    image: nginx:latest\\n\"",
                    "type": "string",
                    "example": "version: '3.8'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n"
                },
                "force_recreate": {
                    "description": "ForceRecreate forces the recreation of containers even if their configuration hasn't changed.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "no_build": {
                    "description": "NoBuild disables building images before starting containers.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "no_start": {
                    "description": "NoStart creates containers but does not start them.\nexample: false",
                    "type": "boolean"
                },
                "project_name": {
                    "description": "ProjectName is the name to assign to the Compose project.\nrequired: true\nexample: \"my-web-app\"",
                    "type": "string"
                },
                "pull": {
                    "description": "Pull attempts to pull newer versions of images before starting containers.\nexample: true",
                    "type": "boolean"
                },
                "remove_orphans": {
                    "description": "RemoveOrphans removes containers for services not defined in the Compose file.\nexample: false",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ComposeValidateRequest": {
            "description": "Contains the Docker Compose file content (YAML) to be validated.",
            "type": "object",
            "required": [
                "compose_file_content"
            ],
            "properties": {
                "compose_file_content": {
                    "description": "ComposeFileContent is the raw YAML content of the Docker Compose file.\nrequired: true\nexample: \"version: '3.8'\\nservices:\\n  web:\\n    image: nginx:latest\\n\"",
                    "type": "string",
                    "example": "version: '3.8'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.Container": {
            "type": "object",
            "required": [
                "image_id",
                "name",
                "network_mode",
                "restart_policy",
                "user_id"
            ],
            "properties": {
                "auto_remove": {
                    "type": "boolean"
                },
                "cap_add": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cap_drop": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "maxLength": 1024
                },
                "container_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "dead": {
                    "type": "boolean"
                },
                "detailed_network_info": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.DetailedNetwork"
                    }
                },
                "detailed_volume_info": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.DetailedVolume"
                    }
                },
                "entrypoint": {
                    "description": "Fields from inspect conversion (might be redundant)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env_vars": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exit_code": {
                    "type": "integer"
                },
                "exposed_ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "finished_at": {
                    "type": "string"
                },
                "has_changed": {
                    "type": "boolean"
                },
                "health": {
                    "type": "string"
                },
                "health_log": {
                    "type": "string"
                },
                "healthcheck": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "host_ipc": {
                    "type": "boolean"
                },
                "host_pid": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "ip_address": {
                    "type": "string"
                },
                "labels": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "last_inspected": {
                    "type": "string"
                },
                "mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MountPoint"
                    }
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "names": {
                    "description": "Fields from list item conversion (might be redundant with inspect)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "network_mode": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkMode"
                },
                "networks": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 5000
                },
                "oom_killed": {
                    "type": "boolean"
                },
                "paused": {
                    "type": "boolean"
                },
                "platform": {
                    "type": "string"
                },
                "ports": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "privileged": {
                    "type": "boolean"
                },
                "processes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.Process"
                    }
                },
                "read_only": {
                    "type": "boolean"
                },
                "resource_limits": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ResourceLimits"
                },
                "resources": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "restart_count": {
                    "type": "integer"
                },
                "restart_policy": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.RestartPolicy"
                },
                "restarting": {
                    "type": "boolean"
                },
                "running": {
                    "type": "boolean"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "security_info": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.SecurityInfo"
                },
                "security_options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "security_profile": {
                    "type": "string"
                },
                "size_root_fs": {
                    "type": "integer"
                },
                "size_rw": {
                    "type": "integer"
                },
                "started_at": {
                    "type": "string"
                },
                "state": {
                    "description": "Raw state string",
                    "type": "string"
                },
                "stats": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStats"
                },
                "status": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStatus"
                },
                "up_time": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "userns_mode": {
                    "type": "string"
                },
                "volumes": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "working_dir": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerCreateRequest": {
            "description": "Configuration details for creating a new Docker container.",
            "type": "object",
            "required": [
                "image",
                "name"
            ],
            "properties": {
                "auto_remove": {
                    "description": "AutoRemove automatically removes the container when it exits.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "command": {
                    "description": "Command is the command to run when the container starts.\nexample: [\"nginx\", \"-g\", \"daemon off;\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "nginx",
                        "-g",
                        "daemon off;"
                    ]
                },
                "cpu_limit": {
                    "description": "CPULimit specifies the CPU quota for the container (e.g., 1.5 means 1.5 CPU cores). Docker uses NanoCPUs (1e9 per core).\nexample: 1.5",
                    "type": "number",
                    "example": 1.5
                },
                "entrypoint": {
                    "description": "Entrypoint overrides the default entrypoint of the image.\nexample: [\"/docker-entrypoint.sh\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "/docker-entrypoint.sh"
                    ]
                },
                "env": {
                    "description": "Env is a list of environment variables to set in the container (e.g., \"VAR=value\").\nexample: [\"NGINX_HOST=example.com\", \"NGINX_PORT=80\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "NGINX_HOST=example.com",
                        "NGINX_PORT=80"
                    ]
                },
                "image": {
                    "description": "Image is the name or ID of the Docker image to use.\nrequired: true\nexample: \"nginx:latest\"",
                    "type": "string",
                    "example": "nginx:latest"
                },
                "labels": {
                    "description": "Labels are key-value pairs to apply to the container.\nexample: {\"environment\": \"development\", \"app\": \"webserver\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "app": "webserver",
                        "environment": "development"
                    }
                },
                "memory_limit": {
                    "description": "MemoryLimit is the maximum amount of memory the container can use (in bytes).\nexample: 104857600 (100MB)",
                    "type": "integer",
                    "example": 104857600
                },
                "name": {
                    "description": "Name is the name to assign to the new container.\nrequired: true\nexample: \"my-nginx-container\"",
                    "type": "string",
                    "example": "my-nginx-container"
                },
                "networks": {
                    "description": "Networks is a list of network names or IDs to connect the container to.\nexample: [\"my-app-network\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "my-app-network"
                    ]
                },
                "notes": {
                    "description": "Notes are user-defined notes for the container (stored in application DB).\nexample: \"Main web server container.\"",
                    "type": "string",
                    "example": "Main web server container."
                },
                "ports": {
                    "description": "Ports specifies the port mappings between the host and the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PortMapping"
                    }
                },
                "privileged": {
                    "description": "Privileged gives the container extended privileges on the host. Use with caution.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "restart_policy": {
                    "description": "RestartPolicy defines the container's behavior when it exits.\nexample: \"unless-stopped\"",
                    "type": "string",
                    "enum": [
                        "no",
                        "on-failure",
                        "always",
                        "unless-stopped"
                    ],
                    "example": "unless-stopped"
                },
                "volumes": {
                    "description": "Volumes specifies the volume mappings between the host/named volumes and the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeMapping"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerExecCreateRequest": {
            "description": "Configuration for creating a new exec instance in a container.",
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "attach_stderr": {
                    "description": "AttachStderr specifies whether to attach stderr to the exec command.\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "attach_stdin": {
                    "description": "AttachStdin specifies whether to attach stdin to the exec command.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "attach_stdout": {
                    "description": "AttachStdout specifies whether to attach stdout to the exec command.\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "command": {
                    "description": "Command is the command to execute in the container, with arguments.\nrequired: true\nexample: [\"/bin/bash\", \"-c\", \"echo hello\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "/bin/bash",
                        "-c",
                        "echo hello"
                    ]
                },
                "detach_keys": {
                    "description": "DetachKeys specifies the key sequence for detaching from the exec session.\nexample: \"ctrl-p,ctrl-q\"",
                    "type": "string",
                    "example": "ctrl-p,ctrl-q"
                },
                "env": {
                    "description": "Env specifies environment variables to set in the exec command's environment.\nexample: [\"VAR1=value1\", \"VAR2=value2\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "VAR1=value1",
                        "VAR2=value2"
                    ]
                },
                "privileged": {
                    "description": "Privileged specifies whether to run the exec command in privileged mode.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "tty": {
                    "description": "Tty specifies whether to allocate a pseudo-TTY for the exec command. Required for interactive sessions.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "working_dir": {
                    "description": "WorkingDir specifies the working directory inside the container for the exec command.\nexample: \"/app\"",
                    "type": "string",
                    "example": "/app"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerExecResponse": {
            "description": "Details about an exec instance created within a container.",
            "type": "object",
            "properties": {
                "container_id": {
                    "description": "ContainerID is the ID of the container where the exec instance ran.\nrequired: true\nexample: \"f7d9e8c7b6a5...\"",
                    "type": "string",
                    "example": "f7d9e8c7b6a5"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the exec instance was created (Note: Docker API might not provide this directly in inspect).\nexample: \"2023-10-27T10:00:00Z\"",
                    "type": "string"
                },
                "exit_code": {
                    "description": "ExitCode is the exit code of the exec process. Only available after the process has finished.\nexample: 0",
                    "type": "integer",
                    "example": 0
                },
                "id": {
                    "description": "ID is the unique identifier of the exec instance.\nrequired: true\nexample: \"a1b2c3d4e5f6...\"",
                    "type": "string",
                    "example": "a1b2c3d4e5f6"
                },
                "open_stderr": {
                    "description": "OpenStderr indicates if stderr was attached to the process.\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "open_stdin": {
                    "description": "OpenStdin indicates if stdin was attached to the process.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "open_stdout": {
                    "description": "OpenStdout indicates if stdout was attached to the process.\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "process_config": {
                    "description": "ProcessConfig holds the configuration of the process executed.",
                    "type": "object",
                    "properties": {
                        "arguments": {
                            "description": "Arguments are the arguments passed to the command.\nexample: [\"-c\", \"echo hello\"]",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "-c",
                                "echo hello"
                            ]
                        },
                        "entrypoint": {
                            "description": "EntryPoint is the entry point for the executed command.\nexample: \"/bin/sh\"",
                            "type": "string",
                            "example": "/bin/sh"
                        },
                        "privileged": {
                            "description": "Privileged indicates if the process ran with elevated privileges.\nexample: false",
                            "type": "boolean",
                            "example": false
                        },
                        "tty": {
                            "description": "Tty indicates if a TTY was allocated for the process.\nexample: false",
                            "type": "boolean",
                            "example": false
                        }
                    }
                },
                "running": {
                    "description": "Running indicates whether the exec process is currently running.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerListResponse": {
            "description": "Contains a list of container details along with pagination information.",
            "type": "object",
            "properties": {
                "containers": {
                    "description": "Containers is the list of container objects returned for the current page.\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerResponse"
                    }
                },
                "metadata": {
                    "description": "Metadata contains pagination and other metadata for the response.\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse"
                        }
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerRenameRequest": {
            "description": "Specifies the new name for an existing container.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name is the new name to assign to the container. Must be unique.\nrequired: true\nexample: \"my-renamed-nginx\"",
                    "type": "string",
                    "example": "my-renamed-nginx"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerResponse": {
            "description": "Contains comprehensive details of a Docker container, including configuration, state, and associated resources.",
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command executed when the container started.\nexample: \"nginx -g daemon off;\"",
                    "type": "string",
                    "example": "nginx -g daemon off;"
                },
                "container_id": {
                    "description": "ContainerID is the unique identifier assigned by Docker.\nrequired: true\nexample: \"f7d9e8c7b6a5...\"",
                    "type": "string",
                    "example": "f7d9e8c7b6a5"
                },
                "created": {
                    "description": "Created is the timestamp when the container was created by Docker.\nrequired: true\nexample: \"2023-10-27T10:00:00Z\"",
                    "type": "string",
                    "example": "2023-10-27T10:00:00Z"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the container record was created in the application database.\nrequired: true\nexample: \"2023-10-27T10:00:05Z\"",
                    "type": "string",
                    "example": "2023-10-27T10:00:05Z"
                },
                "finished": {
                    "description": "Finished is the timestamp when the container last finished.\nexample: \"2023-10-27T11:00:00Z\"",
                    "type": "string",
                    "example": "2023-10-27T11:00:00Z"
                },
                "host_config": {
                    "description": "HostConfig contains details about the container's host configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.HostConfigResponse"
                        }
                    ]
                },
                "id": {
                    "description": "ID is the internal database ID (if managed by the application).\nexample: 101",
                    "type": "integer",
                    "example": 101
                },
                "image": {
                    "description": "Image is the name of the image used by the container.\nrequired: true\nexample: \"nginx:latest\"",
                    "type": "string",
                    "example": "nginx:latest"
                },
                "image_id": {
                    "description": "ImageID is the ID of the image used by the container.\nrequired: true\nexample: \"sha256:a1b2c3d4...\"",
                    "type": "string",
                    "example": "sha256:a1b2c3d4..."
                },
                "labels": {
                    "description": "Labels are the labels applied to the container.\nexample: {\"environment\": \"development\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "environment": "development"
                    }
                },
                "name": {
                    "description": "Name is the user-defined name of the container.\nrequired: true\nexample: \"my-nginx-container\"",
                    "type": "string",
                    "example": "my-nginx-container"
                },
                "networks": {
                    "description": "Networks lists the network connections for the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkConnectionResponse"
                    }
                },
                "notes": {
                    "description": "Notes are user-defined notes stored in the application database.\nexample: \"Main web server container.\"",
                    "type": "string",
                    "example": "Main web server container."
                },
                "platform": {
                    "description": "Platform is the platform string (e.g., \"linux/amd64\").\nexample: \"linux/amd64\"",
                    "type": "string",
                    "example": "linux/amd64"
                },
                "ports": {
                    "description": "Ports lists the port mappings for the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PortMapping"
                    }
                },
                "restart_policy": {
                    "description": "RestartPolicy is the restart policy applied to the container.\nexample: \"unless-stopped\"",
                    "type": "string",
                    "example": "unless-stopped"
                },
                "started": {
                    "description": "Started is the timestamp when the container was last started.\nexample: \"2023-10-27T10:01:00Z\"",
                    "type": "string",
                    "example": "2023-10-27T10:01:00Z"
                },
                "state": {
                    "description": "State is the detailed state string from Docker (e.g., \"running\", \"exited (0)\").\nrequired: true\nexample: \"running\"",
                    "type": "string",
                    "example": "running"
                },
                "stats": {
                    "description": "Stats contains the latest resource usage statistics (if requested/available).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStatsResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status is a simplified status string (e.g., running, stopped).\nrequired: true\nexample: \"running\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStatus"
                        }
                    ],
                    "example": "running"
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the container record was last updated in the application database.\nrequired: true\nexample: \"2023-10-27T10:05:00Z\"",
                    "type": "string",
                    "example": "2023-10-27T10:05:00Z"
                },
                "user_id": {
                    "description": "UserID is the ID of the user who owns/created this container record in the application database.\nrequired: true\nexample: 1",
                    "type": "integer",
                    "example": 1
                },
                "volumes": {
                    "description": "Volumes lists the volume mounts for the container.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeMountResponse"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStats": {
            "type": "object",
            "properties": {
                "block_read": {
                    "type": "integer"
                },
                "block_write": {
                    "type": "integer"
                },
                "cpu_percentage": {
                    "type": "number"
                },
                "cpu_usage": {
                    "type": "integer"
                },
                "memory_limit": {
                    "type": "integer"
                },
                "memory_max_usage": {
                    "type": "integer"
                },
                "memory_percentage": {
                    "type": "number"
                },
                "memory_usage": {
                    "type": "integer"
                },
                "network_rx": {
                    "type": "integer"
                },
                "network_tx": {
                    "type": "integer"
                },
                "online_cpus": {
                    "type": "integer"
                },
                "pids": {
                    "type": "integer"
                },
                "system_cpu_usage": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStatsResponse": {
            "description": "Snapshot of CPU, memory, network, and block I/O usage for a container.",
            "type": "object",
            "properties": {
                "block_read": {
                    "description": "BlockRead is the total bytes read from block devices by the container.\nrequired: true\nexample: 204800",
                    "type": "integer",
                    "example": 204800
                },
                "block_write": {
                    "description": "BlockWrite is the total bytes written to block devices by the container.\nrequired: true\nexample: 102400",
                    "type": "integer",
                    "example": 102400
                },
                "cpu_percentage": {
                    "description": "CPUPercentage is the container's CPU usage percentage across all cores.\nrequired: true\nexample: 12.34",
                    "type": "number",
                    "example": 12.34
                },
                "memory_limit": {
                    "description": "MemoryLimit is the memory limit for the container in bytes.\nrequired: true\nexample: 104857600",
                    "type": "integer",
                    "example": 104857600
                },
                "memory_percentage": {
                    "description": "MemoryPercentage is the current memory usage as a percentage of the limit.\nrequired: true\nexample: 50.0",
                    "type": "number",
                    "example": 50
                },
                "memory_usage": {
                    "description": "MemoryUsage is the current memory usage in bytes.\nrequired: true\nexample: 52428800",
                    "type": "integer",
                    "example": 52428800
                },
                "network_rx": {
                    "description": "NetworkRx is the total bytes received over the network by the container.\nrequired: true\nexample: 1024000",
                    "type": "integer",
                    "example": 1024000
                },
                "network_tx": {
                    "description": "NetworkTx is the total bytes transmitted over the network by the container.\nrequired: true\nexample: 512000",
                    "type": "integer",
                    "example": 512000
                },
                "pids": {
                    "description": "PIDs is the number of processes currently running in the container.\nrequired: true\nexample: 5",
                    "type": "integer",
                    "example": 5
                },
                "timestamp": {
                    "description": "Timestamp is the time when the stats were collected.\nrequired: true\nexample: \"2023-10-27T10:15:00Z\"",
                    "type": "string",
                    "example": "2023-10-27T10:15:00Z"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ContainerStatus": {
            "type": "string",
            "enum": [
                "running",
                "stopped",
                "created",
                "paused",
                "restarting",
                "removing",
                "exited",
                "dead",
                "unknown"
            ],
            "x-enum-varnames": [
                "ContainerStatusRunning",
                "ContainerStatusStopped",
                "ContainerStatusCreated",
                "ContainerStatusPaused",
                "ContainerStatusRestarting",
                "ContainerStatusRemoving",
                "ContainerStatusExited",
                "ContainerStatusDead",
                "ContainerStatusUnknown"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.DeploymentInfo": {
            "description": "Detailed status of a Compose project, including its services and any ongoing operations.",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error contains the last error message associated with the deployment, if any.\nexample: \"Failed to pull image 'nonexistent:latest'\"",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation describes the currently active operation (e.g., up, down), if any.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.OperationInfo"
                        }
                    ]
                },
                "projectName": {
                    "description": "ProjectName is the name of the Compose project.\nrequired: true\nexample: \"my-web-app\"",
                    "type": "string"
                },
                "services": {
                    "description": "Services maps service names to their detailed status information.\nrequired: true",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ServiceInfo"
                    }
                },
                "startTime": {
                    "description": "StartTime is the timestamp when the deployment was first tracked or started.\nrequired: true\nexample: \"2023-10-27T10:00:00Z\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the overall status of the deployment.\nrequired: true\nexample: \"running\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.DeploymentStatus"
                        }
                    ]
                },
                "updateTime": {
                    "description": "UpdateTime is the timestamp when the deployment status was last updated.\nrequired: true\nexample: \"2023-10-27T10:05:00Z\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.DeploymentStatus": {
            "type": "string",
            "enum": [
                "unknown",
                "pending",
                "deploying",
                "running",
                "partial",
                "stopping",
                "stopped",
                "removing",
                "removed",
                "failed"
            ],
            "x-enum-varnames": [
                "DeploymentStatusUnknown",
                "DeploymentStatusPending",
                "DeploymentStatusDeploying",
                "DeploymentStatusRunning",
                "DeploymentStatusPartial",
                "DeploymentStatusStopping",
                "DeploymentStatusStopped",
                "DeploymentStatusRemoving",
                "DeploymentStatusRemoved",
                "DeploymentStatusFailed"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.DetailedNetwork": {
            "type": "object",
            "properties": {
                "driver": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "internal": {
                    "type": "boolean"
                },
                "ipam_config": {
                    "description": "Use local models.IPAM",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.IPAM"
                        }
                    ]
                },
                "labels": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "scope": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.DetailedVolume": {
            "type": "object",
            "properties": {
                "driver": {
                    "type": "string"
                },
                "labels": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "mountpoint": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "scope": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.EndpointIPAMConfigRequest": {
            "description": "Specifies static IP addresses for a container's network endpoint.",
            "type": "object",
            "properties": {
                "ipv4_address": {
                    "description": "IPv4Address is the static IPv4 address to assign to the container.\nexample: 172.28.5.10",
                    "type": "string",
                    "example": "172.20.10.5"
                },
                "ipv6_address": {
                    "description": "IPv6Address is the static IPv6 address to assign to the container.\nexample: \"2001:db8:abcd::10\"",
                    "type": "string",
                    "example": "2001:db8:abcd::5"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.EndpointSettingsRequest": {
            "description": "Configuration for the container's endpoint within the network.",
            "type": "object",
            "properties": {
                "aliases": {
                    "description": "Aliases are network-scoped aliases for the container.\nexample: [\"web\", \"frontend\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "app",
                        "web"
                    ]
                },
                "ipam_config": {
                    "description": "IPAMConfig allows specifying a static IP address for the container in this network.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.EndpointIPAMConfigRequest"
                        }
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorInfo": {
            "description": "Detailed information about an error that occurred during an API request.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is a machine-readable error code identifying the specific error type.\nrequired: true\nexample: RESOURCE_NOT_FOUND",
                    "type": "string",
                    "example": "RESOURCE_NOT_FOUND"
                },
                "details": {
                    "description": "Details provides optional additional information about the error, such as validation failures.\nexample: {\"field\": \"command\", \"error\": \"cannot be empty\"}"
                },
                "message": {
                    "description": "Message is a human-readable description of the error.\nrequired: true\nexample: The requested container was not found.",
                    "type": "string",
                    "example": "The requested container was not found."
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorResponse": {
            "description": "Standard structure for returning errors from the API.",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error contains the detailed error information.\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ErrorInfo"
                        }
                    ]
                },
                "meta": {
                    "description": "Meta contains metadata about the response.\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse"
                        }
                    ]
                },
                "success": {
                    "description": "Success indicates if the request was successful (always false for errors).\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.HealthInfo": {
            "description": "Details about the health status based on Docker health checks.",
            "type": "object",
            "properties": {
                "failingStreak": {
                    "description": "FailingStreak is the number of consecutive failed health checks.\nrequired: true\nexample: 0",
                    "type": "integer"
                },
                "log": {
                    "description": "Log contains recent health check probe results.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.HealthLogEntry"
                    }
                },
                "status": {
                    "description": "Status indicates the current health status (e.g., \"healthy\", \"unhealthy\", \"starting\").\nrequired: true\nexample: \"healthy\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.HealthLogEntry": {
            "description": "Log entry detailing the outcome of one health check attempt.",
            "type": "object",
            "properties": {
                "end": {
                    "description": "End is the timestamp when the health check probe ended.\nrequired: true\nexample: \"2023-10-27T10:05:51Z\"",
                    "type": "string"
                },
                "exitCode": {
                    "description": "ExitCode is the exit code of the health check command. 0 typically indicates success.\nrequired: true\nexample: 0",
                    "type": "integer"
                },
                "output": {
                    "description": "Output contains the stdout/stderr output from the health check command.\nexample: \"OK\"",
                    "type": "string"
                },
                "start": {
                    "description": "Start is the timestamp when the health check probe started.\nrequired: true\nexample: \"2023-10-27T10:05:50Z\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.HostConfigResponse": {
            "description": "Key host configuration settings applied to the container.",
            "type": "object",
            "properties": {
                "blkio_weight": {
                    "description": "BlkioWeight is the block I/O weight (relative weight).\nexample: 500",
                    "type": "integer",
                    "example": 500
                },
                "cap_add": {
                    "description": "CapAdd lists the capabilities added to the container.\nexample: [\"NET_ADMIN\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "NET_ADMIN"
                    ]
                },
                "cap_drop": {
                    "description": "CapDrop lists the capabilities dropped from the container.\nexample: [\"MKNOD\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "MKNOD"
                    ]
                },
                "cpu_period": {
                    "description": "CPUPeriod is the CPU CFS period in microseconds.\nexample: 100000",
                    "type": "integer",
                    "example": 100000
                },
                "cpu_quota": {
                    "description": "CPUQuota is the CPU CFS quota in microseconds.\nexample: 50000",
                    "type": "integer",
                    "example": 50000
                },
                "cpu_shares": {
                    "description": "CPUShares is the relative CPU weight (vs. other containers).\nexample: 1024",
                    "type": "integer",
                    "example": 1024
                },
                "cpuset_cpus": {
                    "description": "CpusetCpus specifies the CPUs the container can use (e.g., \"0-3\", \"0,1\").\nexample: \"0,1\"",
                    "type": "string",
                    "example": "0,1"
                },
                "cpuset_mems": {
                    "description": "CpusetMems specifies the memory nodes the container can use.\nexample: \"0\"",
                    "type": "string",
                    "example": "0"
                },
                "memory": {
                    "description": "Memory is the memory limit in bytes. 0 means no limit.\nexample: 104857600",
                    "type": "integer",
                    "example": 104857600
                },
                "memory_swap": {
                    "description": "MemorySwap is the total memory (memory + swap). -1 means unlimited swap.\nexample: -1",
                    "type": "integer",
                    "example": -1
                },
                "network_mode": {
                    "description": "NetworkMode is the network mode used by the container (e.g., \"bridge\", \"host\").\nrequired: true\nexample: \"bridge\"",
                    "type": "string",
                    "example": "bridge"
                },
                "privileged": {
                    "description": "Privileged indicates if the container runs in privileged mode.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "readonly_rootfs": {
                    "description": "ReadonlyRootfs indicates if the container's root filesystem is read-only.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "restart_policy": {
                    "description": "RestartPolicy is the full restart policy string (e.g., \"unless-stopped\").\nrequired: true\nexample: \"unless-stopped\"",
                    "type": "string",
                    "example": "unless-stopped"
                },
                "security_opt": {
                    "description": "SecurityOpt lists the security options applied to the container.\nexample: [\"seccomp=unconfined\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "seccomp=unconfined"
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.IPAM": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.IPAMConfig"
                    }
                },
                "driver": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.IPAMConfig": {
            "type": "object",
            "properties": {
                "aux_address": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap"
                },
                "gateway": {
                    "type": "string"
                },
                "ip_range": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageBuildResponse": {
            "description": "Provides details about the image build process, including logs and timing.",
            "type": "object",
            "properties": {
                "duration": {
                    "description": "Duration is the total duration of the build process in a human-readable format.\nrequired: true\nexample: \"5m0s\"",
                    "type": "string"
                },
                "end_time": {
                    "description": "EndTime is the timestamp when the build process finished.\nrequired: true\nexample: \"2023-10-27T11:05:00Z\"",
                    "type": "string"
                },
                "error_detail": {
                    "description": "ErrorDetail contains specific error information if the build failed.\nexample: \"failed to solve: rpc error: code = Unknown desc = executor failed running...\"",
                    "type": "string"
                },
                "image_id": {
                    "description": "ImageID is the Docker Image ID (SHA256 digest) of the built image, if successful.\nexample: \"sha256:c3d4e5f6...\"",
                    "type": "string",
                    "example": "sha256:b1c2d3e4..."
                },
                "logs": {
                    "description": "Logs contains the output stream from the Docker build process.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repository": {
                    "description": "Repository is the repository name used for tagging.\nexample: \"my-custom-app\"",
                    "type": "string"
                },
                "start_time": {
                    "description": "StartTime is the timestamp when the build process started.\nrequired: true\nexample: \"2023-10-27T11:00:00Z\"",
                    "type": "string"
                },
                "success": {
                    "description": "Success indicates if the build operation completed successfully (may not mean the image is usable if errors occurred during build).\nrequired: true\nexample: true",
                    "type": "boolean"
                },
                "tag": {
                    "description": "Tag is the tag applied to the built image.\nexample: \"v1.1\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageDeleteResponseItem": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "string",
                    "example": "sha256:a1b2c3d4..."
                },
                "untagged": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageHistoryItem": {
            "description": "Details about a specific layer, including how it was created and its size. (Note: This is functionally the same as ImageHistoryResponse but used for clarity in some contexts).",
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Comment is an optional comment associated with the layer creation.\nexample: \"Added base filesystem\"",
                    "type": "string"
                },
                "created": {
                    "description": "Created is the timestamp when this layer was created.\nrequired: true\nexample: \"2023-10-26T13:50:00Z\"",
                    "type": "string",
                    "example": "2023-09-15T14:00:00Z"
                },
                "created_by": {
                    "description": "CreatedBy is the command used to create this layer.\nrequired: true\nexample: \"/bin/sh -c #(nop) ADD file:abc in /\"",
                    "type": "string",
                    "example": "/bin/sh -c #(nop) CMD [\"nginx\" \"-g\" \"daemon off;\"]"
                },
                "id": {
                    "description": "ID is the identifier for this history record (often the layer ID or \u003cmissing\u003e).\nrequired: true\nexample: \"sha256:b1c2d3e4...\"",
                    "type": "string",
                    "example": "sha256:a1b2c3d4..."
                },
                "size": {
                    "description": "Size is the size of this layer in bytes.\nrequired: true\nexample: 5242880",
                    "type": "integer",
                    "example": 0
                },
                "size_human": {
                    "description": "SizeHuman is the size of this layer in a human-readable format.\nrequired: true\nexample: \"5MB\"",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags lists the tags associated with this specific history entry (usually empty).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageHistoryResponse": {
            "description": "Details about a specific layer, including how it was created and its size.",
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Comment is an optional comment associated with the layer creation.\nexample: \"Added base filesystem\"",
                    "type": "string"
                },
                "created": {
                    "description": "Created is the timestamp when this layer was created.\nrequired: true\nexample: \"2023-10-26T13:50:00Z\"",
                    "type": "string",
                    "example": "2023-09-15T14:00:00Z"
                },
                "created_by": {
                    "description": "CreatedBy is the command used to create this layer.\nrequired: true\nexample: \"/bin/sh -c #(nop) ADD file:abc in /\"",
                    "type": "string",
                    "example": "/bin/sh -c #(nop) CMD [\"nginx\" \"-g\" \"daemon off;\"]"
                },
                "id": {
                    "description": "ID is the identifier for this history record (often the layer ID or \u003cmissing\u003e).\nrequired: true\nexample: \"sha256:b1c2d3e4...\"",
                    "type": "string",
                    "example": "sha256:a1b2c3d4..."
                },
                "size": {
                    "description": "Size is the size of this layer in bytes.\nrequired: true\nexample: 5242880",
                    "type": "integer"
                },
                "size_human": {
                    "description": "SizeHuman is the size of this layer in a human-readable format.\nrequired: true\nexample: \"5MB\"",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags lists the tags associated with this specific history entry (usually empty).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageListResponse": {
            "description": "Contains a list of image details along with pagination information.",
            "type": "object",
            "properties": {
                "images": {
                    "description": "Images is the list of image objects returned for the current page.\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageResponse"
                    }
                },
                "metadata": {
                    "description": "Metadata contains pagination and other metadata for the response.\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse"
                        }
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImagePullRequest": {
            "description": "Specifies the image to pull and optional credentials for private registries.",
            "type": "object",
            "required": [
                "image"
            ],
            "properties": {
                "credentials": {
                    "description": "Credentials contains optional username and password for authenticating with a private registry.",
                    "type": "object",
                    "properties": {
                        "password": {
                            "description": "Password or access token for the private registry.\nexample: \"mysecretpassword\"",
                            "type": "string",
                            "example": "mysecretpassword"
                        },
                        "username": {
                            "description": "Username for the private registry.\nexample: \"dockerhub_user\"",
                            "type": "string",
                            "example": "dockerhub_user"
                        }
                    }
                },
                "image": {
                    "description": "Image is the name of the image to pull (e.g., \"nginx\", \"myregistry.com/myapp\").\nrequired: true\nexample: \"nginx\"",
                    "type": "string",
                    "example": "nginx"
                },
                "tag": {
                    "description": "Tag is the specific tag of the image to pull. Defaults to \"latest\" if omitted.\nexample: \"1.21-alpine\"",
                    "type": "string",
                    "example": "1.21-alpine"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImagePullResponse": {
            "description": "Provides details about the image that was pulled.",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the creation timestamp of the pulled image (from image inspect).\nexample: \"2023-10-26T14:00:00Z\"",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the Docker Image ID (SHA256 digest) of the pulled image.\nexample: \"sha256:a1b2c3d4...\"",
                    "type": "string"
                },
                "image": {
                    "description": "Image is the full name (repo:tag) of the image that was pulled.\nrequired: true\nexample: \"nginx:latest\"",
                    "type": "string"
                },
                "size": {
                    "description": "Size is the size of the pulled image in bytes.\nexample: 135234567",
                    "type": "integer"
                },
                "success": {
                    "description": "Success indicates if the pull operation was successful (note: Docker pull itself doesn't return success/fail easily, this might be application-level).\nrequired: true\nexample: true",
                    "type": "boolean"
                },
                "time": {
                    "description": "Time is the timestamp when the pull operation completed on the server.\nrequired: true\nexample: \"2023-10-27T10:30:00Z\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageRemoveResponse": {
            "description": "Summarizes the outcome of removing an image, including untagged and deleted layers. Note: This structure might need adjustment based on the actual Docker API response format for removal.",
            "type": "object",
            "properties": {
                "deleted": {
                    "description": "Deleted is the count of deleted image layers/references.\nexample: 5",
                    "type": "integer"
                },
                "items": {
                    "description": "Items provides details on untagged or deleted items (structure may vary based on Docker API).\nexample: [{\"Untagged\": \"myimage:latest\"}, {\"Deleted\": \"sha256:a1b2...\"}]",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "space_reclaimed": {
                    "description": "SpaceReclaimed is the total disk space freed in bytes.\nexample: 150000000",
                    "type": "integer"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageResponse": {
            "description": "Contains comprehensive details of a Docker image, including tags, size, and history.",
            "type": "object",
            "properties": {
                "architecture": {
                    "description": "Architecture is the CPU architecture the image was built for.\nexample: \"amd64\"",
                    "type": "string",
                    "example": "amd64"
                },
                "author": {
                    "description": "Author is the author specified in the image metadata.\nexample: \"Nginx Maintainers \u003cnginx-devel@nginx.org\u003e\"",
                    "type": "string"
                },
                "containers": {
                    "description": "Containers lists the IDs of containers currently using this image.\nexample: [\"f7d9e8c7b6a5\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created": {
                    "description": "Created is the timestamp when the image was created.\nrequired: true\nexample: \"2023-10-26T14:00:00Z\"",
                    "type": "string",
                    "example": "2023-09-15T14:00:00Z"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the image record was created in the application database.\nexample: \"2023-10-27T09:00:00Z\"",
                    "type": "string"
                },
                "digest": {
                    "description": "Digest is the repository digest (SHA256) if available.\nexample: \"sha256:f6d669c...\"",
                    "type": "string"
                },
                "history": {
                    "description": "History provides details about the layers that make up the image.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageHistoryResponse"
                    }
                },
                "id": {
                    "description": "ID is the internal database ID (if managed by the application).\nexample: 25",
                    "type": "integer"
                },
                "image_id": {
                    "description": "ImageID is the unique identifier assigned by Docker (SHA256 digest).\nrequired: true\nexample: \"sha256:a1b2c3d4e5f6...\"",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are the labels applied to the image.\nexample: {\"maintainer\": \"Nginx Maintainers\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the primary repository:tag associated with the image.\nexample: \"nginx:latest\"",
                    "type": "string"
                },
                "notes": {
                    "description": "Notes are user-defined notes stored in the application database.\nexample: \"Base image for web servers.\"",
                    "type": "string"
                },
                "os": {
                    "description": "OS is the operating system the image was built for.\nexample: \"linux\"",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository is the repository part of the image name.\nexample: \"nginx\"",
                    "type": "string"
                },
                "size": {
                    "description": "Size is the total size of the image layers in bytes.\nrequired: true\nexample: 135234567",
                    "type": "integer",
                    "example": 133000000
                },
                "size_human": {
                    "description": "SizeHuman is the total size in a human-readable format.\nrequired: true\nexample: \"129MB\"",
                    "type": "string"
                },
                "tag": {
                    "description": "Tag is the tag part of the image name.\nexample: \"latest\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the image record was last updated in the application database.\nexample: \"2023-10-27T09:05:00Z\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID is the ID of the user who owns/created this image record in the application database.\nexample: 1",
                    "type": "integer"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageTagRequest": {
            "description": "Specifies the source image and the new repository/tag to apply.",
            "type": "object",
            "required": [
                "repository",
                "source_image",
                "tag"
            ],
            "properties": {
                "repository": {
                    "description": "Repository is the repository name for the new tag.\nrequired: true\nexample: \"my-custom-nginx\"",
                    "type": "string",
                    "example": "my-custom-nginx"
                },
                "source_image": {
                    "description": "SourceImage is the ID or current name:tag of the image to tag.\nrequired: true\nexample: \"nginx:latest\" or \"sha256:a1b2c3d4...\"",
                    "type": "string",
                    "example": "nginx:latest"
                },
                "tag": {
                    "description": "Tag is the tag name for the new tag.\nrequired: true\nexample: \"v1.0\"",
                    "type": "string",
                    "example": "v1.0"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.JSONMap": {
            "type": "object",
            "additionalProperties": true
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.LoginRequest": {
            "description": "Credentials required for user login.",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's registered email address.\nrequired: true\nexample: user@example.com",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password is the user's password.\nrequired: true\nexample: StrongP@ssw0rd!",
                    "type": "string",
                    "example": "StrongP@ssw0rd!"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.PaginationResponse"
                },
                "request_id": {
                    "type": "string",
                    "example": "req-12345"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-10-27T10:30:00Z"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.MountPoint": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "propagation": {
                    "type": "string"
                },
                "rw": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkConnectRequest": {
            "description": "Specifies the container and optional endpoint settings for connecting to a network.",
            "type": "object",
            "required": [
                "container"
            ],
            "properties": {
                "container": {
                    "description": "Container is the ID or name of the container to connect.\nrequired: true\nexample: my-web-container",
                    "type": "string",
                    "example": "my-app-container"
                },
                "endpoint_config": {
                    "description": "EndpointConfig provides custom network settings for the container within this network.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.EndpointSettingsRequest"
                        }
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkConnectionResponse": {
            "description": "Information about a container's endpoint within a Docker network.",
            "type": "object",
            "properties": {
                "aliases": {
                    "description": "Aliases are network-scoped aliases for the container within this network.\nexample: [\"nginx\", \"webserver\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "nginx",
                        "webserver"
                    ]
                },
                "gateway": {
                    "description": "Gateway is the gateway address for this network connection.\nexample: \"172.28.0.1\"",
                    "type": "string",
                    "example": "172.28.0.1"
                },
                "ip_address": {
                    "description": "IPAddress is the IPv4 address assigned to the container within this network.\nexample: \"172.28.0.3\"",
                    "type": "string",
                    "example": "172.28.0.3"
                },
                "mac_address": {
                    "description": "MacAddress is the MAC address assigned to the container's endpoint in this network.\nexample: \"02:42:ac:1c:00:03\"",
                    "type": "string",
                    "example": "02:42:ac:1c:00:03"
                },
                "network_id": {
                    "description": "NetworkID is the ID of the network the container is connected to.\nrequired: true\nexample: \"b7cda8f3e9a1...\"",
                    "type": "string",
                    "example": "b7cda8f3e9a1"
                },
                "network_name": {
                    "description": "NetworkName is the name of the network.\nrequired: true\nexample: \"my-app-network\"",
                    "type": "string",
                    "example": "my-app-network"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkContainerResponse": {
            "description": "Information about a specific container's endpoint within a network.",
            "type": "object",
            "properties": {
                "aliases": {
                    "description": "Aliases are network-scoped aliases for the container within this network.\nexample: [\"web\", \"frontend\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "endpoint_id": {
                    "description": "EndpointID is the ID of the network endpoint for this container.\nrequired: true\nexample: \"ep-a1b2c3d4e5f6...\"",
                    "type": "string",
                    "example": "ep-a1b2c3d4..."
                },
                "ipv4_address": {
                    "description": "IPv4Address is the IPv4 address assigned to the container's endpoint.\nexample: \"172.28.0.2\"",
                    "type": "string"
                },
                "ipv6_address": {
                    "description": "IPv6Address is the IPv6 address assigned to the container's endpoint.\nexample: \"2001:db8:abcd::2\"",
                    "type": "string"
                },
                "mac_address": {
                    "description": "MacAddress is the MAC address assigned to the container's endpoint.\nrequired: true\nexample: \"02:42:ac:1c:00:02\"",
                    "type": "string",
                    "example": "02:42:ac:1c:00:03"
                },
                "name": {
                    "description": "Name is the name of the connected container.\nrequired: true\nexample: \"my-web-container\"",
                    "type": "string",
                    "example": "my-app-container"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkCreateRequest": {
            "type": "object"
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkDisconnectRequest": {
            "description": "Specifies the container to disconnect from a network.",
            "type": "object",
            "required": [
                "container"
            ],
            "properties": {
                "container": {
                    "description": "Container is the ID or name of the container to disconnect.\nrequired: true\nexample: my-web-container",
                    "type": "string",
                    "example": "my-app-container"
                },
                "force": {
                    "description": "Force disconnects the container even if it is running.\nexample: false",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkMode": {
            "type": "string",
            "enum": [
                "none",
                "bridge",
                "host",
                "container"
            ],
            "x-enum-varnames": [
                "NetworkModeNone",
                "NetworkModeBridge",
                "NetworkModeHost",
                "NetworkModeContainer"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkResponse": {
            "description": "Contains comprehensive details of a Docker network, including configuration and connected containers.",
            "type": "object",
            "properties": {
                "attachable": {
                    "description": "Attachable indicates if non-service containers can attach to the network.\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "config_only": {
                    "description": "ConfigOnly indicates if the network configuration is only used for services.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "containers": {
                    "description": "Containers lists the containers connected to this network and their endpoint details.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.NetworkContainerResponse"
                    }
                },
                "created": {
                    "description": "Created is the timestamp when the network was created by Docker.\nrequired: true\nexample: \"2023-10-27T09:00:00Z\"",
                    "type": "string",
                    "example": "2023-10-25T09:00:00Z"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the network record was created in the application database.\nexample: \"2023-10-27T09:05:00Z\"",
                    "type": "string"
                },
                "driver": {
                    "description": "Driver is the network driver used (e.g., bridge, overlay).\nrequired: true\nexample: \"bridge\"",
                    "type": "string",
                    "example": "bridge"
                },
                "enable_ipv6": {
                    "description": "EnableIPv6 indicates if IPv6 is enabled for the network.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "gateway": {
                    "description": "Gateway is the IPv4 gateway for the network's subnet.\nexample: \"172.28.0.1\"",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the internal database ID (if managed by the application).\nexample: 5",
                    "type": "integer"
                },
                "ingress": {
                    "description": "Ingress indicates if the network provides the routing-mesh in swarm mode.\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "internal": {
                    "description": "Internal indicates if the network is internal (restricts external access).\nrequired: true\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "ip_range": {
                    "description": "IPRange is the range of IPs available within the subnet.\nexample: \"172.28.5.0/24\"",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are the labels applied to the network.\nexample: {\"environment\": \"production\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the user-defined name of the network.\nrequired: true\nexample: \"my-app-network\"",
                    "type": "string",
                    "example": "my-app-network"
                },
                "network_id": {
                    "description": "NetworkID is the unique identifier assigned by Docker.\nrequired: true\nexample: \"b7cda8f3e9a1...\"",
                    "type": "string"
                },
                "notes": {
                    "description": "Notes are user-defined notes stored in the application database.\nexample: \"Main network for the web application stack.\"",
                    "type": "string"
                },
                "options": {
                    "description": "Options are driver-specific options for the network.\nexample: {\"com.docker.network.bridge.name\": \"mybridge0\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "scope": {
                    "description": "Scope indicates the scope of the network (e.g., local, swarm).\nrequired: true\nexample: \"local\"",
                    "type": "string",
                    "example": "local"
                },
                "subnet": {
                    "description": "Subnet is the primary IPv4 subnet for the network in CIDR notation.\nexample: \"172.28.0.0/16\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the network record was last updated in the application database.\nexample: \"2023-10-27T09:10:00Z\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID is the ID of the user who owns/created this network record in the application database.\nexample: 1",
                    "type": "integer"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.OperationInfo": {
            "description": "Details about a long-running operation like 'up', 'down', 'start', etc.",
            "type": "object",
            "properties": {
                "details": {
                    "description": "Details provides additional context or progress information about the operation.\nexample: {\"step\": \"Creating service web\", \"progress\": 0.5}",
                    "type": "object",
                    "additionalProperties": true
                },
                "endTime": {
                    "description": "EndTime is the timestamp when the operation finished (only present if Status is 'complete' or 'failed').\nexample: \"2023-10-27T10:05:15Z\"",
                    "type": "string"
                },
                "error": {
                    "description": "Error contains the error message if the operation failed.\nexample: \"Failed to create service 'db': network 'shared' not found\"",
                    "type": "string"
                },
                "startTime": {
                    "description": "StartTime is the timestamp when the operation began.\nrequired: true\nexample: \"2023-10-27T10:04:30Z\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status indicates the current status of the operation.\nrequired: true\nexample: \"in_progress\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.OperationStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type indicates the type of operation being performed.\nrequired: true\nexample: \"up\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.OperationType"
                        }
                    ]
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.OperationStatus": {
            "type": "string",
            "enum": [
                "pending",
                "in_progress",
                "complete",
                "failed"
            ],
            "x-enum-varnames": [
                "OperationStatusPending",
                "OperationStatusInProgress",
                "OperationStatusComplete",
                "OperationStatusFailed"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.OperationType": {
            "type": "string",
            "enum": [
                "up",
                "down",
                "start",
                "stop",
                "restart",
                "pull",
                "build",
                "create",
                "remove",
                "scale"
            ],
            "x-enum-varnames": [
                "OperationTypeUp",
                "OperationTypeDown",
                "OperationTypeStart",
                "OperationTypeStop",
                "OperationTypeRestart",
                "OperationTypePull",
                "OperationTypeBuild",
                "OperationTypeCreate",
                "OperationTypeRemove",
                "OperationTypeScale"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Should hold the slice of items"
                },
                "meta": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.PaginationResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 10
                },
                "total_items": {
                    "type": "integer",
                    "example": 42
                },
                "total_pages": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.PingResponse": {
            "type": "object",
            "properties": {
                "api_version": {
                    "type": "string"
                },
                "builder_version": {
                    "type": "string"
                },
                "experimental": {
                    "type": "boolean"
                },
                "os_type": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.PortMapping": {
            "description": "Defines how a container port is exposed on the host machine.",
            "type": "object",
            "properties": {
                "container_port": {
                    "description": "ContainerPort is the port number inside the container.\nrequired: true\nexample: \"80\"",
                    "type": "string"
                },
                "host_ip": {
                    "description": "HostIP is the IP address on the host to bind the port to. Defaults to 0.0.0.0 (all interfaces).\nexample: \"127.0.0.1\"",
                    "type": "string"
                },
                "host_port": {
                    "description": "HostPort is the port number on the host. If empty or \"0\", Docker assigns a random ephemeral port.\nexample: \"8080\"",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the protocol (e.g., \"tcp\", \"udp\", \"sctp\"). Defaults to \"tcp\".\nexample: \"tcp\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.Process": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "cpu": {
                    "type": "string"
                },
                "memory": {
                    "type": "string"
                },
                "pid": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.RefreshTokenRequest": {
            "description": "Contains the refresh token needed to obtain a new access token.",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "description": "RefreshToken is the valid refresh token previously issued to the user.\nrequired: true\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (long token string)",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.RegisterRequest": {
            "description": "Data required for registering a new user account.",
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address, used for login.\nrequired: true\nexample: user@example.com",
                    "type": "string",
                    "example": "user@example.com"
                },
                "invite_code": {
                    "description": "InviteCode is an optional code required for registration if the system is configured for invite-only.\nexample: ABC-123",
                    "type": "string",
                    "example": "ABC-123"
                },
                "name": {
                    "description": "Name is the user's display name.\nrequired: true\nexample: John Doe",
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "description": "Password is the user's desired password (min 8 characters).\nrequired: true\nexample: StrongP@ssw0rd!",
                    "type": "string",
                    "minLength": 8,
                    "example": "StrongP@ssw0rd!"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ResourceLimits": {
            "type": "object",
            "properties": {
                "blkio_weight": {
                    "type": "integer"
                },
                "cpu_period": {
                    "type": "integer"
                },
                "cpu_quota": {
                    "type": "integer"
                },
                "cpu_shares": {
                    "type": "integer"
                },
                "cpuset_cpus": {
                    "type": "string"
                },
                "cpuset_mems": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "memory_reservation": {
                    "type": "integer"
                },
                "memory_swap": {
                    "type": "integer"
                },
                "pids_limit": {
                    "type": "integer"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.RestartPolicy": {
            "type": "string",
            "enum": [
                "no",
                "always",
                "on-failure",
                "unless-stopped"
            ],
            "x-enum-varnames": [
                "RestartPolicyNo",
                "RestartPolicyAlways",
                "RestartPolicyOnFailure",
                "RestartPolicyUnlessStopped"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.SecurityInfo": {
            "type": "object",
            "properties": {
                "cap_add": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cap_drop": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ipc_mode": {
                    "type": "string"
                },
                "network_mode": {
                    "type": "string"
                },
                "pid_mode": {
                    "type": "string"
                },
                "privileged": {
                    "type": "boolean"
                },
                "read_only_rootfs": {
                    "type": "boolean"
                },
                "security_opt": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sensitive_mounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userns_mode": {
                    "type": "string"
                },
                "uts_mode": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ServiceInfo": {
            "description": "Detailed status of a single service, including its containers and health.",
            "type": "object",
            "properties": {
                "containerIDs": {
                    "description": "ContainerIDs lists the Docker container IDs associated with this service instance(s).\nexample: [\"f7d9e8c7b6a5\", \"a1b2c3d4e5f6\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "error": {
                    "description": "Error contains the last error message associated with the service, if any.\nexample: \"Container exited with code 1\"",
                    "type": "string"
                },
                "health": {
                    "description": "Health provides details about the service's health check status, if configured.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.HealthInfo"
                        }
                    ]
                },
                "name": {
                    "description": "Name is the name of the service as defined in the Compose file.\nrequired: true\nexample: \"web\"",
                    "type": "string"
                },
                "startTime": {
                    "description": "StartTime is the timestamp when the service (or its first container) was started.\nrequired: true\nexample: \"2023-10-27T10:01:00Z\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the current status of the service.\nrequired: true\nexample: \"running\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ServiceStatus"
                        }
                    ]
                },
                "updateTime": {
                    "description": "UpdateTime is the timestamp when the service status was last updated.\nrequired: true\nexample: \"2023-10-27T10:06:00Z\"",
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.ServiceStatus": {
            "type": "string",
            "enum": [
                "unknown",
                "pending",
                "creating",
                "starting",
                "created",
                "running",
                "paused",
                "restarting",
                "stopping",
                "removing",
                "stopped",
                "exited",
                "dead",
                "failed",
                "complete",
                "removed",
                "unhealthy",
                "partial",
                "scaling_up",
                "scaling_down"
            ],
            "x-enum-comments": {
                "ServiceStatusCreated": "Added constant",
                "ServiceStatusPartial": "Added constant",
                "ServiceStatusStarting": "Added constant",
                "ServiceStatusStopped": "Added constant",
                "ServiceStatusStopping": "Added constant",
                "ServiceStatusUnhealthy": "Added constant"
            },
            "x-enum-varnames": [
                "ServiceStatusUnknown",
                "ServiceStatusPending",
                "ServiceStatusCreating",
                "ServiceStatusStarting",
                "ServiceStatusCreated",
                "ServiceStatusRunning",
                "ServiceStatusPaused",
                "ServiceStatusRestarting",
                "ServiceStatusStopping",
                "ServiceStatusRemoving",
                "ServiceStatusStopped",
                "ServiceStatusExited",
                "ServiceStatusDead",
                "ServiceStatusFailed",
                "ServiceStatusComplete",
                "ServiceStatusRemoved",
                "ServiceStatusUnhealthy",
                "ServiceStatusPartial",
                "ServiceStatusScalingUp",
                "ServiceStatusScalingDown"
            ]
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Use omitempty if data might be nil/empty"
                },
                "message": {
                    "description": "Optional success message",
                    "type": "string"
                },
                "meta": {
                    "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.SystemInfoResponse": {
            "type": "object",
            "properties": {
                "api_version": {
                    "type": "string"
                },
                "architecture": {
                    "type": "string",
                    "example": "aarch64"
                },
                "bridge_nf_ip6tables": {
                    "type": "boolean"
                },
                "bridge_nf_iptables": {
                    "type": "boolean"
                },
                "cgroup_driver": {
                    "type": "string"
                },
                "cgroup_version": {
                    "type": "string"
                },
                "containers_paused": {
                    "type": "integer"
                },
                "containers_running": {
                    "type": "integer"
                },
                "containers_stopped": {
                    "type": "integer"
                },
                "cpu_cfs_period": {
                    "type": "boolean"
                },
                "cpu_cfs_quota": {
                    "type": "boolean"
                },
                "cpu_set": {
                    "type": "boolean"
                },
                "cpu_shares": {
                    "type": "boolean"
                },
                "cpus": {
                    "type": "integer"
                },
                "debug": {
                    "type": "boolean"
                },
                "debug0": {
                    "type": "boolean"
                },
                "docker_root_dir": {
                    "type": "string"
                },
                "driver": {
                    "type": "string",
                    "example": "overlay2"
                },
                "driver_status": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "experimental_build": {
                    "type": "boolean"
                },
                "http_proxy": {
                    "type": "string"
                },
                "https_proxy": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "system-id-123"
                },
                "images": {
                    "type": "integer",
                    "example": 50
                },
                "ipv4_forwarding": {
                    "type": "boolean"
                },
                "kernel_memory": {
                    "type": "boolean"
                },
                "kernel_memory_tcp": {
                    "type": "boolean"
                },
                "kernel_version": {
                    "type": "string",
                    "example": "5.15.0-87-generic"
                },
                "live_restore_enabled": {
                    "type": "boolean"
                },
                "logging_driver": {
                    "type": "string"
                },
                "memory": {
                    "type": "integer"
                },
                "memory_human": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "boolean"
                },
                "n_events_listener": {
                    "type": "integer"
                },
                "n_fd": {
                    "type": "integer"
                },
                "n_goroutines": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "no_proxy": {
                    "type": "string"
                },
                "oom_kill_disable": {
                    "type": "boolean"
                },
                "operating_system": {
                    "type": "string",
                    "example": "Docker Desktop"
                },
                "os_type": {
                    "type": "string"
                },
                "pids_limit": {
                    "type": "boolean"
                },
                "registry_config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "security_options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "server_time": {
                    "type": "string"
                },
                "server_version": {
                    "type": "string",
                    "example": "24.0.5"
                },
                "swap_limit": {
                    "type": "boolean"
                },
                "system_time": {
                    "type": "string"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.SystemPruneRequest": {
            "type": "object",
            "properties": {
                "build_cache": {
                    "description": "Prune build cache",
                    "type": "boolean",
                    "example": true
                },
                "containers": {
                    "description": "Prune containers",
                    "type": "boolean",
                    "example": true
                },
                "filters": {
                    "description": "Filters to apply (e.g., {\"label\": [\"key=value\"]}) - Note: Docker API uses map[string][]string, adjust if needed",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "label": "mylabel=myvalue"
                    }
                },
                "images": {
                    "description": "Prune images",
                    "type": "boolean",
                    "example": false
                },
                "networks": {
                    "description": "Prune networks",
                    "type": "boolean",
                    "example": true
                },
                "volumes": {
                    "description": "Prune volumes",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.SystemPruneResponse": {
            "type": "object",
            "properties": {
                "build_cache_deleted": {
                    "description": "Keep this field",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "containers_deleted": {
                    "description": "Renamed from ContainersPruned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "images_deleted": {
                    "description": "Renamed from ImagesPruned, changed type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.ImageDeleteResponseItem"
                    }
                },
                "networks_deleted": {
                    "description": "Renamed from NetworksPruned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "space_reclaimed": {
                    "type": "integer"
                },
                "volumes_deleted": {
                    "description": "Renamed from VolumesPruned",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.TokenResponse": {
            "description": "Contains the JWT access and refresh tokens along with user details.",
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "AccessToken is the JWT token used for authenticating subsequent requests.\nrequired: true\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (long token string)",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "expires_at": {
                    "description": "ExpiresAt is the exact timestamp when the access token expires.\nrequired: true\nexample: 2023-10-27T11:00:00Z",
                    "type": "string",
                    "example": "2023-10-27T11:00:00Z"
                },
                "expires_in": {
                    "description": "ExpiresIn is the duration in seconds until the access token expires.\nrequired: true\nexample: 3600",
                    "type": "integer",
                    "example": 3600
                },
                "refresh_token": {
                    "description": "RefreshToken is the token used to obtain a new access token when the current one expires.\nrequired: true\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (different long token string)",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "roles": {
                    "description": "Roles is the list of roles assigned to the user.\nrequired: true\nexample: [\"user\", \"admin\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "admin"
                    ]
                },
                "token_type": {
                    "description": "TokenType indicates the type of token (always \"Bearer\").\nrequired: true\nexample: Bearer",
                    "type": "string",
                    "example": "Bearer"
                },
                "user_id": {
                    "description": "UserID is the unique identifier of the logged-in user.\nrequired: true\nexample: 1",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.TopResponse": {
            "description": "Lists the running processes within a container.",
            "type": "object",
            "properties": {
                "processes": {
                    "description": "Processes is a list of arrays, where each inner array represents a process and its corresponding column values.\nrequired: true\nexample: [[\"1\", \"root\", \"/usr/sbin/nginx\"], [\"6\", \"nginx\", \"nginx: worker process\"]]",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "titles": {
                    "description": "Titles are the column headers for the process list (e.g., \"PID\", \"USER\", \"%CPU\", \"COMMAND\").\nrequired: true\nexample: [\"PID\", \"USER\", \"COMMAND\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserListResponse": {
            "description": "Contains a list of user details along with pagination information.",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Metadata contains pagination and other metadata for the response.\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.MetadataResponse"
                        }
                    ]
                },
                "users": {
                    "description": "Users is the list of user objects returned for the current page.\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse"
                    }
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.UserResponse": {
            "description": "Detailed information about a user account.",
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active indicates whether the user account is currently active.\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the user account was created.\nrequired: true\nexample: 2023-01-15T09:30:00Z",
                    "type": "string",
                    "example": "2023-01-15T09:30:00Z"
                },
                "email": {
                    "description": "Email is the user's email address.\nrequired: true\nexample: user@example.com",
                    "type": "string",
                    "example": "user@example.com"
                },
                "email_verified": {
                    "description": "EmailVerified indicates whether the user's email address has been verified.\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "description": "ID is the unique identifier for the user.\nrequired: true\nexample: 1",
                    "type": "integer",
                    "example": 1
                },
                "last_login": {
                    "description": "LastLogin is the timestamp of the user's last login. Omitted if the user has never logged in.\nexample: 2023-10-27T10:00:00Z",
                    "type": "string",
                    "example": "2023-10-27T10:00:00Z"
                },
                "name": {
                    "description": "Name is the user's display name.\nrequired: true\nexample: John Doe",
                    "type": "string",
                    "example": "John Doe"
                },
                "roles": {
                    "description": "Roles is the list of roles assigned to the user.\nrequired: true\nexample: [\"user\", \"admin\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user",
                        "admin"
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the user account was last updated.\nrequired: true\nexample: 2023-10-26T15:45:00Z",
                    "type": "string",
                    "example": "2023-10-26T15:45:00Z"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeCreateRequest": {
            "type": "object"
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeMapping": {
            "description": "Defines how a host path or named volume is mounted into a container.",
            "type": "object",
            "required": [
                "destination",
                "source"
            ],
            "properties": {
                "destination": {
                    "description": "Destination is the absolute path inside the container where the volume is mounted.\nrequired: true\nexample: \"/var/www/html\"",
                    "type": "string",
                    "example": "/var/www/html"
                },
                "read_only": {
                    "description": "ReadOnly specifies whether the mount should be read-only within the container.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "source": {
                    "description": "Source is the name of the volume or the path on the host machine.\nrequired: true\nexample: \"my-app-data\" or \"/path/on/host\"",
                    "type": "string",
                    "example": "my-app-data"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeMountResponse": {
            "description": "Information about a specific volume mount point inside a container.",
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Destination is the absolute path inside the container where the volume is mounted.\nrequired: true\nexample: \"/data\"",
                    "type": "string",
                    "example": "/data"
                },
                "mode": {
                    "description": "Mode provides driver-specific options, often includes SELinux labels like 'z' or 'Z'.\nexample: \"z\"",
                    "type": "string",
                    "example": "z"
                },
                "rw": {
                    "description": "RW indicates if the mount is read-write.\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "source": {
                    "description": "Source is the source path on the host or the name of the Docker volume.\nrequired: true\nexample: \"/path/on/host\" or \"my-app-data\"",
                    "type": "string",
                    "example": "my-app-data"
                },
                "volume_id": {
                    "description": "VolumeID is the name of the Docker volume (if Source refers to a named volume).\nexample: \"my-app-data\"",
                    "type": "string",
                    "example": "my-app-data"
                }
            }
        },
        "github_com_threatflux_dockerServerMangerGoMCP_internal_models.VolumeResponse": {
            "description": "Contains comprehensive details of a Docker volume, including configuration and usage.",
            "type": "object",
            "properties": {
                "containers": {
                    "description": "Containers lists the IDs of containers currently using this volume. Requires UsageData from Docker API.\nexample: [\"f7d9e8c7b6a5\", \"a1b2c3d4e5f6\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the volume was created by Docker. Note: Docker API might return this as 'CreatedAt' string, needs parsing.\nrequired: true\nexample: \"2023-10-27T08:00:00Z\"",
                    "type": "string",
                    "example": "2023-10-26T12:00:00Z"
                },
                "driver": {
                    "description": "Driver is the volume driver used (e.g., local).\nrequired: true\nexample: \"local\"",
                    "type": "string",
                    "example": "local"
                },
                "id": {
                    "description": "ID is the internal database ID (if managed by the application).\nexample: 12",
                    "type": "integer"
                },
                "in_use": {
                    "description": "InUse indicates whether the volume is currently used by any containers. Requires UsageData from Docker API.\nexample: true",
                    "type": "boolean"
                },
                "labels": {
                    "description": "Labels are the labels applied to the volume.\nexample: {\"environment\": \"production\", \"backup\": \"true\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mountpoint": {
                    "description": "Mountpoint is the path on the host where the volume data is stored.\nrequired: true\nexample: \"/var/lib/docker/volumes/my-app-data/_data\"",
                    "type": "string",
                    "example": "/var/lib/docker/volumes/my-app-data/_data"
                },
                "name": {
                    "description": "Name is the user-defined name of the volume.\nrequired: true\nexample: \"my-app-data\"",
                    "type": "string",
                    "example": "my-app-data"
                },
                "notes": {
                    "description": "Notes are user-defined notes stored in the application database.\nexample: \"Persistent data for the main database.\"",
                    "type": "string"
                },
                "options": {
                    "description": "Options are driver-specific options for the volume.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "scope": {
                    "description": "Scope indicates the scope of the volume (e.g., local, global).\nrequired: true\nexample: \"local\"",
                    "type": "string",
                    "example": "local"
                },
                "size": {
                    "description": "Size is the calculated size of the volume in bytes. Requires UsageData from Docker API.\nexample: 104857600",
                    "type": "integer"
                },
                "size_human": {
                    "description": "SizeHuman is the calculated size of the volume in a human-readable format.\nexample: \"100MB\"",
                    "type": "string"
                },
                "status": {
                    "description": "Status provides low-level status information about the volume (driver-specific).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the volume record was last updated in the application database.\nexample: \"2023-10-27T08:10:00Z\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID is the ID of the user who owns/created this volume record in the application database.\nexample: 1",
                    "type": "integer"
                },
                "volume_id": {
                    "description": "VolumeID is the unique identifier assigned by Docker (often the same as Name).\nrequired: true\nexample: \"my-app-data\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Docker Server Manager Go MCP API",
	Description:      "This is the API documentation for the Docker Server Manager Go MCP.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
